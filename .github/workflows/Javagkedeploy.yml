# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation )
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy main branch to GKE

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.GKE_DEV_PROJECT }}
  GAR_LOCATION: us-central1 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: cip-kubernetes-dev-cluster    # TODO: update to cluster name
  GKE_ZONE: europe-north1-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: java-gke-test-naveen # TODO: update to deployment name
  GKE_URL: europe-north1-docker.pkg.dev
  REPOSITORY: samples # TODO: update to Artifact Registry docker repository
  IMAGE: java-gke-test-naveen
  FULL_IMAGE: 'europe-north1-docker.pkg.dev/cip-shared-services/cip/java-gke-test-naveen'
  release: false
  prerelease: true
  

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: dev

    permissions:
      contents: 'write'
      id-token: 'write'
      repository-projects: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}

    # Alternative option - authentication via credentials json
    # - id: 'auth'
    #   uses: 'google-github-actions/auth@v0'
    #   with:
    #     credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

   # - name: Docker configuration
    - run: gcloud --quiet auth configure-docker $GKE_URL
    
   #   run: |-
   #   echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
   #- name: Set up GKE credentials
   #  uses: google-github-actions/get-gke-credentials@v0
   # with:
   #  cluster_name: ${{ env.GKE_CLUSTER }}
   #   location: ${{ env.GKE_ZONE }}

    # Build the Docker image
    
     # Setup JDK 16, since it's not present on the runner
    - name: Setup JDK 16
      uses: actions/setup-java@v3.6.0
      with:
        java-version: '16'
        distribution: 'adopt'
        cache: maven
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1.0.1

    - name: Use gcloud CLI
      run: |
        gcloud info
        gcloud config list project
        
    - name: Build and Create Documentaion 
      run: mvn verify

    
    # Builds the project and creates the docker image
    - name: Build with Maven
      run: mvn compile jib:dockerBuild
      
      
      
    - name: Check release and pre release inputs parameters are provided correctly
      if: ${{ env.release == 'false' && env.prerelease == 'false' }}
      run: echo "release and pre release inputs parameters are not provided correctly  "; exit 1
      
    - name: Check if this is release build
      if: ${{ env.release == 'true' && env.prerelease == 'true' }}
      run: echo "Attempt to build release with snapshot version in POM  "; exit 1
           
    - name: Create tag
      uses: anothrNick/github-tag-action@v1
      id: create-snapshot-tag
      env:
        RELEASE_BRANCHES: none
        PRERELEASE: ${{ env.prerelease }}
        PRERELEASE_SUFFIX: snapshot
        WITH_V: true
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: patch
        VERBOSE: false

    - name: Tag Docker image
      run: docker tag ${{ env.IMAGE }} $IMAGE_LOCATION:$project_version
      env:
        project_version: ${{ steps.create-snapshot-tag.outputs.new_tag }}
        IMAGE: ${{ env.IMAGE }}
        IMAGE_LOCATION: ${{ env.FULL_IMAGE }}
        
    - name: Publish Docker image
      run: docker push $IMAGE_LOCATION:$project_version
      env:
        project_version: ${{ steps.create-snapshot-tag.outputs.new_tag }}
        IMAGE_LOCATION: ${{ env.FULL_IMAGE }}

        
        
        
   

   







  #  - name: Tag revision
  #    run: |
  #      git tag ${{ steps.get-version.outputs.version }} $GITHUB_SHA
  #      git tag
  #      git show ${{ steps.get-version.outputs.version }}
  #      git log --pretty=oneline
  #      git push origin ${{ steps.get-version.outputs.version }}
    # Add remote tag before pushing
    #- name: Remote tag
    # run: docker tag $IMAGE $FULL_IMAGE:$project_version
    #  env:
    #    project_version: ${{ steps.get-version.outputs.version }}
        
    
   # - name: Build
   #  run: |-
   #    docker build \
   #      --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
   #       --build-arg GITHUB_SHA="$GITHUB_SHA" \
   #       --build-arg GITHUB_REF="$GITHUB_REF" \
   #       .
    # Push the Docker image to Google Artifact Registry
 #   - name: Publish
 #    run: |-
 #     docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
    # Set up kustomize
 #   - name: Set up Kustomize
 #    run: |-
 #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
 #    chmod u+x ./kustomize
    # Deploy the Docker image to the GKE cluster
#    - name: Deploy
#     run: |-
        # replacing the image name in the k8s template
#      ./kustomize edit set image LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
#     ./kustomize build . | kubectl apply -f -
#    kubectl rollout status deployment/$DEPLOYMENT_NAME
#   kubectl get services -o wide
